- 시그널 : 소프트웨어 인터럽트. 비동기적으로 프로세스에게 메시지를 보낸다.

- 유닉스 커널이 프로세스에게 보내는 것이다.

- 시그널을 받은 프로세스는 다음 4가지 행동중 하나를 할 수 있다.

   1. 받은 시그널에 대해 기본동작을 수행한다.

   2. 시그널받았을시의 미리 지정해둔 함수를 호출한다.

   3. 시그널을 무시한다.

   4. 블록한다. 블록된 시그널들은 큐에 쌓여있다  블록이 해제되면 차례대로 전달된다.



 3. 시그널 보내기

#include <signal.h>

#include <sys/types.h>



int kill(pid_t pid,int sig);



pid : 특정 프로세스 혹은 그룹 pid



#include <signal.h>

int raise(int sig);

이 함수를 호출한 프로세스에게  시그널을 보낸다.

만약 시그널 핸들러가 호출되면, 시그널 핸들러의 수행이 끝날때 까지 raise함수는 리턴하지 않는다.

성공시 0 리턴, 실패시 -1 리턴



#include <stdlib.h>

void abort(void);

이를 호출한 프로세스에게 SIGABRT  시그널 을 보낸다. (프로세스 비정상적으로 종료시키고 덤프파일 생성.)

프로세스를 종료시키므로 리턴값 없음.



4. 시그널 기본 처리

 1. 시그널 핸들러함수

  #include <signal.h>

  void (*signal(int sig,void (*disp)(int)))(int);



dsip엔 세가지중 하나를 지정 : 시그널 핸들러 함수의 포인터, SIG_IGN 상수, SIG_DFL 상수.



  성공시 시그널 핸들러의 주소 리턴, 실패시 SIG_ERR 리턴.

  성공시 또,  시그널 처리방법을 기본처리 방법(SIG_DFL)으로 재설정한다. 

   ㄷ           때문에 만약  시그널 처리를 계속하려면, signal함수를 또 재설정해줘야한다.



#include <signal.h>  

void (*sigset(int,함수포인터)))(int);



위의 함수와 완전이 동일.

다른점은 시그널핸들러가 한번 호출된 후에 -> 기본동작으로 재설정 하지않고 -> 

시그널 핸들러를 자동으로 재지정함.



5. 시그널 집합

파직스 표준에서 시그널과 관련해 정의한 함수주 ㅇ상당수는 시그널을 개별적으로 처리하지않고

복수의 시그널을 처리할수있게한다. 복수의 시그널을 처리 하기위해 도입한개념을 

시그널 집합 이라고 한다.



1.시그널 집합의 개념

시그널 집합은 시그널을 비트 마스크로 표현.

시그널 하나가  한개의 비트와 1:1로 연결되어있다. 

비트값이 1이면 해당 시그널이 설정된거고, 0이면 시그널이 설정되지 않은것.



시그널집합의 처리를 위해 sigset_t이라는 구조체를 제공한다.

typedef struct {

unsigned int __sigbits[4];

} sigset_t;



2. 시그널 집합 처리 함수

1. 시그널 집합 비우기 : 

#include <signal.h>

int sigemptyset(sigset_t *set);



2. 시그널 집합에 모든 시그널 설정

int sigfillset(sigset_t *set);



3. 시그널 집합에 시그널 설정 추가/제거

int sigaddset(sigset_t *set,int signo);



int sigdelset(sigset_t *set,int signo);



4. 시그널 집합에 설정된 시그널 확인 

int sigismember(sigset_t *set,int signo);

해당 시그널이 설정되어있으면 1리턴, 없으면 0리턴





6. sigaction 함수의 활용

siganl / sigsdt 함수는 단순히 시그널핸들러 함수만 지정할수있지만,

시그액션 함수는 훨씬 다양하게 시그널을 제어 할수있다.



1. sigaction 구조체

-시그널 처리를 위한 시그널 핸들러의 포인터 sa_handler

- 시그널 핸들러가 수행되는 동안 블록될 시그널집합 sa_mask

- 추가적인 기능을 설정할수있는 플래그 sa_flags



2. sigaction 함수

#include <siganl.h>

int sigaction(int sig, const struct sigaction *restrict act,

const struct sigaction *restrict  oact);



1번째 인자 : 처리할 시그널

2번째인자 : NULL또는 처리할 방법을 담은 시그액션 구조체의 주소, act 

3번째 인자 : NULL또는 기존에 시그널을 처리하던 방법을 저장할 구조체의 주소.



3.시그널 발생원인 검색   - 시간상 생략





7. 알람 시그널

일정한 시간이 지난후에, 자동으로 시그널이 발생하게 하려면 일람시그널을 사용.

한번 발생시킬수도 있고

일정간격을두고 주기적으로 발생시킬수도있다.



1. 알람 시그널 함수

- 정해진 시간에 한번 시그널을 보내는 알람 시그널 함수.

#include <unistd.h>

unsigned int alarm(unsigned int sec);



인자로 0을 설정하면 이전에 설정한 알람 요청은 모두 취소됨.

인자로 지정한 초시간이 지나면, SIGARLM 시그널이 생성되어 

프로세스에 전달된다. 

프로세스별로 알람시계는 하나빢에 없으므로, 알람은 하나만 설정할수 있다.

따라서 이전 알람이 울리기전에  다시 새 알람 함수를 호출하면 , 이전 설정은 사라지고

새 설정으로 재설정된다.



2. 인터벌 타이머  - 시간상 생략



8. 기타 시그널 처리함수



ㅈㅓㄴ략

...



2. 시그널 블록킹과 해제

이 함수를 사용하면 프로세스가 동작하는 동안에 특정 시그널들을 받지않도록 블록/ 블록한것을 해제 할수있다.



#include <signal.h>



int sighold(int sig);

int sigrelse(int sig);





3. 시그널집합 블로킹과 해제

2번 함수와 같지만, 시그널 집합을 사용해 한번에 여러시그널을 블록할수있다.



#include <signal.h>

int sigprocmask(int how, const sigset_t *restrict set,

sigset_t *restrict oset);





how : 시그널을 블록/블록해제 할것인지 여부

  값 : SIG_BLOCK  - set에 지정한 시그널 집합을 시그널 마스크에 추가

       SIG_UNBLOCK - set에 지정한 시그널 집합을 시그널 마스크에서 제거

  SIG_SETMASK - set에 지정한 시그널 집합으로  대체.(완전 대체)

set : 블록하거나 해제할 시그널 집합의 주소

oset : NULL  또는 이전 설정값을 저장할 시그널 집합의 주소.



출처: http://siminq.tistory.com/entry/챕터7-시그널 [모험 공작소]
