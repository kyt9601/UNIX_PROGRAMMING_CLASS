main() {
char ch[10];
int pid, p[2];
if (pipe(p)==-1) {
perror(“pipe call”);
exit(1);
}
pid=fork();
if (pid==0){
close(p[1]);
read(p[0], ch, 10);
printf(“%s\n”, ch);
exit(0);
}
close(p[0]);
scanf(“%s”, ch);
write(p[1], ch, 10);
wait(0);
exit(0);
}

blocking read / blocking write
◦ read가 blocking 되는 경우 : pipe가 비어 있는 경우
◦ write가 blocking 되는 경우 : pipe가 가득 찬 경우


main() {
int i, in, pid, p[2][2];
for(i=0;i<2;i++)
pipe(p[i]);
pid=fork();
if (pid==0){
close(p[0][1]);
close(p[1][0]);
read(p[0][0], &in, sizeof(int));
in++;
write(p[1][1], &in, sizeof(int));
exit(0);
}
close(p[0][0]);
close(p[1][1]);
scanf(“%d”, &in);
write(p[0][1], &in, sizeof(int));
read(p[1][0], &in, sizeof(int));
printf(“%d\n”, in);
wait(0);
exit(0);
}


 pipe 닫기
◦ 쓰기 전용 pipe 닫기 : 다른 writer가 없는 경우, read를
위해 기다리던 process들에게 0을 return (EOF과 같은
효과)
◦ 읽기 전용 pipe 닫기 : 더 이상 reader가 없으면, writer
들은 SIGPIPE signal을 받는다. Signal handling이 되지
않으면 process는 종료; signal handling이 되면, signal
처리 후 write는 -1을 return; 


non-Blocking read / non-blocking write:
◦ 여러 pipe를 차례로 polling 하는 경우;
 사용법 :
#include <fcntl.h>
fcntl(filedes, F_SETFL, O_NONBLOCK);
◦ filedes가 쓰기 전용이고, pipe가 차면 blocking 없이 즉시 -1
을 return;
◦ 읽기 전용인 경우에는, pipe가 비어 있으면, 즉시 -1을 return;
◦ 이 경우, errno는 EAGAIN;




사용법 :
#include<sys/time.h>
int select(int nfds, fd_set *readfds, fd_set *writefds,
fd_set *errorfds, struct timeval *timeout);



 void FD_ZERO(fd_set *fdset);
◦ fdset 초기화;
 void FD_SET(int fd, fd_set *fdset);
◦ fdset의 fd bit를 1로 설정;
 int FD_ISSET(int fd, fd_set *fset);
◦ fdset의 fd bit가 1인지 검사;
 viod FD_CLR(int fd, fd_set *fset);
◦ fdset의 fd bit를 0으로 설정; 

struct timeval {
long tv_sec;
long tv_usec;
};

 timeout이
◦ NULL이면 해당 event가 발생 시까지 blocking.
◦ 0이면, non-blocking.
◦ 0이 아닌 값이면, read/write가 없는 경우 정해진 시간
후에 return

 select의 return 값은 :
◦ -1 : 오류 발생 시
◦ 0 : timeout 발생 시
◦ 0 보다 큰 정수 : 읽기/쓰기 가능한 file descriptor의 수
 주의 사항 : return시 mask를 지우고, 재설정



 fifo를 이용한 통신의 예제 :
◦ reader가 O_RDWR로 fifo를 open한 이유는?
 writer 종료 시 blocking 된 채로 기다리기 위해, 아니면, 무
한 0 return.


int main(void){
int fd, n;
char buf[512];
mkfifo("fifo", 0600);
fd=open("fifo", O_RDWR);
for (;;){
n=read(fd, buf, 512);
write(1, buf, n);
}
}


int main(void){
int fd, j, nread;
char buf[512];
if ((fd=open("fifo", O_WRONLY|O_NONBLOCK)) < 0){
printf("fifo open failed");
exit(1);
}
for (j=0; j<3; j++){
nread=read(0, buf, 512);
write(fd, buf, nread);
}
exit(0);
}
